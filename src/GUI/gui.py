import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import threading
import os

from src.pipeline.astrometry_api_client import AstrometryAPIClient
from src.pipeline.image_processor import ImageProcessor
from src.utils.logger import Logger

class AstrometryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞")
        self.api_key = "lyjwakywqahzzjvj"
        self.client = AstrometryAPIClient(self.api_key)
        self.file_path = None
        self.image_processor = ImageProcessor()
        self.logger = Logger()

        self._build_ui()

    def _build_ui(self):
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(expand=True, fill="both")

        self.tab_main = ttk.Frame(self.notebook)
        self.tab_info = ttk.Frame(self.notebook)

        self.notebook.add(self.tab_main, text="–û–±—Ä–∞–±–æ—Ç–∫–∞")
        self.notebook.add(self.tab_info, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

        self._build_main_tab(self.tab_main)
        self._build_info_tab(self.tab_info)

    def _build_main_tab(self, frame):
        padding = {'padx': 10, 'pady': 10}

        ttk.Label(frame, text="–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞—Å—Ç—Ä–æ–º–µ—Ç—Ä–∏–∏", font=("Arial", 12)).pack(**padding)

        self.btn_choose = ttk.Button(frame, text="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", command=self.choose_file)
        self.btn_choose.pack(**padding)

        self.label_filename = ttk.Label(frame, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", foreground="gray")
        self.label_filename.pack(**padding)

        ttk.Label(frame, text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG, FITS", foreground="black").pack(**padding)

        self.btn_upload = ttk.Button(frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.upload_file)
        self.btn_upload.pack(**padding)

        self.label_status = ttk.Label(frame, text="–°—Ç–∞—Ç—É—Å: ‚Äî", foreground="black")
        self.label_status.pack(**padding)

    def _build_info_tab(self, frame):
        info_text = (
            "üî≠ –≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤—ë–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞.\n\n"
            "üìù –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∫–∞–∫ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, "
            "–∫–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –∫–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ç.–¥."
        )

        text_widget = tk.Text(frame, wrap="word", bg=self.root.cget("bg"), borderwidth=0)
        text_widget.insert("1.0", info_text)
        text_widget.config(state="disabled")
        text_widget.pack(expand=True, fill="both", padx=10, pady=10)

    def choose_file(self):
        selected_path = self.image_processor.handle()

        if selected_path:
            self.file_path = selected_path
            filename = os.path.basename(selected_path)
            self.label_filename.config(text=f"–í—ã–±—Ä–∞–Ω: {filename}", foreground="black")
        else:
            self.label_filename.config(text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", foreground="gray")

    def upload_file(self):
        if not self.file_path:
            messagebox.showwarning("–ù–µ—Ç —Ñ–∞–π–ª–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.")
            return

        self.label_status.config(text="–°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—Å–µ...", foreground="blue")

        threading.Thread(target=self._process_upload, daemon=True).start()

    def _process_upload(self):
        try:
            submission_id = self.client.upload_image(self.file_path)
            self._update_status("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...", "blue")

            job_id = self._wait_for_job(submission_id)
            if job_id:
                result = self.client.get_job_result(job_id)
                self._update_status("–ì–æ—Ç–æ–≤–æ", "green")
                print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
            else:
                self._update_status("–û—à–∏–±–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å", "red")

        except Exception as e:
            self._update_status(f"–û—à–∏–±–∫–∞: {str(e)}", "red")

    def _wait_for_job(self, subid, timeout=300, interval=5):
        import time
        elapsed = 0
        while elapsed < timeout:
            status = self.client.get_submission_status(subid)
            jobs = status.get("jobs", [])
            for job_id in jobs:
                if job_id:
                    job_status = self.client.get_job_status(job_id)
                    if job_status.get("status") == "success":
                        return job_id
                    elif job_status.get("status") == "failure":
                        raise Exception("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
            time.sleep(interval)
            elapsed += interval
        return None

    def _update_status(self, text, color):
        self.label_status.config(text=f"–°—Ç–∞—Ç—É—Å: {text}", foreground=color)